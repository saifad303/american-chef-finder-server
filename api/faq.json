[
  {
    "id": 1,
    "q": "Tell us the differences between uncontrolled and controlled components.",
    "a": "In React, controlled components are those whose state and behavior are controlled by the parent component through the use of props. They require the parent to pass down the necessary props for the component to update its state and behavior. On the other hand, uncontrolled components manage their own state internally, without relying on props from the parent component."
  },
  {
    "id": 2,
    "q": "How to validate React props using PropTypes?",
    "a": "To validate the props passed to a React component, use PropTypes, a library provided by React. Start by defining the propTypes property for your component and specifying the type and validation rules for each prop you want to validate. There are various PropTypes available, including 'string', 'number', 'bool', 'array', 'object', 'func', 'symbol', 'node', 'element', 'any', and more. By using PropTypes, you can ensure that the props passed to your component are of the expected types and that required props are not missing. If the passed props do not match the specified types and validation rules, PropTypes will throw an error in the console, helping you catch errors early in the development process."
  },
  {
    "id": 3,
    "q": "Tell us the difference between nodejs and express js.",
    "a": "Node.js is a versatile and open-source runtime environment that supports developing server-side and networking applications that run on multiple platforms. Express.js is a lightweight framework that builds on top of Node.js' web server functionality, streamlining its APIs and introducing new features to make web development easier and faster."
  },
  {
    "id": 4,
    "q": "What is a custom hook, and why will you create a custom hook?",
    "a": "Custom React JS hooks are functions that React JS developers can reuse to add unique and specialized functionality to their applications. While third-party libraries are often used to add new features, custom hooks can be created when there is no available library that provides the desired functionality. This allows developers to customize their applications without the need for external dependencies. By leveraging custom hooks, developers can write more efficient and concise code, making development faster and more streamlined."
  }
]
